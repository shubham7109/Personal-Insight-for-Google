// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Personal_Insight.Models;
//
//    var chromeAutofillModel = ChromeAutofillModel.FromJson(jsonString);

namespace Personal_Insight.Models.JSON_Models.ChromeAutofill
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ChromeAutofillModel
    {
        [JsonProperty("Autofill")]
        public List<Autofill> Autofill { get; set; }
    }

    public partial class Autofill
    {
        [JsonProperty("name_first")]
        public List<string> NameFirst { get; set; }

        [JsonProperty("address_home_country")]
        public string AddressHomeCountry { get; set; }

        [JsonProperty("address_home_sorting_code")]
        public string AddressHomeSortingCode { get; set; }

        [JsonProperty("address_home_state")]
        public string AddressHomeState { get; set; }

        [JsonProperty("address_home_dependent_locality")]
        public string AddressHomeDependentLocality { get; set; }

        [JsonProperty("address_home_city")]
        public string AddressHomeCity { get; set; }

        [JsonProperty("address_home_language_code")]
        public string AddressHomeLanguageCode { get; set; }

        [JsonProperty("name_full")]
        public List<string> NameFull { get; set; }

        [JsonProperty("origin")]
        public string Origin { get; set; }

        [JsonProperty("name_last")]
        public List<string> NameLast { get; set; }

        [JsonProperty("name_middle")]
        public List<string> NameMiddle { get; set; }

        [JsonProperty("use_count")]
        public long UseCount { get; set; }

        [JsonProperty("email_address")]
        public List<string> EmailAddress { get; set; }

        [JsonProperty("company_name")]
        public string CompanyName { get; set; }

        [JsonProperty("address_home_line1")]
        public string AddressHomeLine1 { get; set; }

        [JsonProperty("address_home_line2")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AddressHomeLine2 { get; set; }

        [JsonProperty("guid")]
        public Guid Guid { get; set; }

        [JsonProperty("address_home_zip")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long AddressHomeZip { get; set; }

        [JsonProperty("address_home_street_address")]
        public string AddressHomeStreetAddress { get; set; }

        [JsonProperty("phone_home_whole_number")]
        public List<string> PhoneHomeWholeNumber { get; set; }

        [JsonProperty("use_date")]
        public long UseDate { get; set; }
    }

    public partial class ChromeAutofillModel
    {
        public static ChromeAutofillModel FromJson(string json) => JsonConvert.DeserializeObject<ChromeAutofillModel>(json, Personal_Insight.Models.JSON_Models.ChromeAutofill.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ChromeAutofillModel self) => JsonConvert.SerializeObject(self, Personal_Insight.Models.JSON_Models.ChromeAutofill.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
