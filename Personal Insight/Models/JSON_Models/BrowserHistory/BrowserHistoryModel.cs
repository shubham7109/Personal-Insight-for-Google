// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Personal_Insight.Models.JSON_Models.BrowserHistory;
//
//    var browserHistoryModel = BrowserHistoryModel.FromJson(jsonString);

namespace Personal_Insight.Models.JSON_Models.BrowserHistory
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class BrowserHistoryModel
    {
        [JsonProperty("Browser History")]
        public List<BrowserHistory> BrowserHistory { get; set; }
    }

    public partial class BrowserHistory
    {
        [JsonProperty("favicon_url")]
        public Uri FaviconUrl { get; set; }

        [JsonProperty("page_transition")]
        public string PageTransition { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("url")]
        public Uri Url { get; set; }

        [JsonProperty("time_usec")]
        public long TimeUsec { get; set; }
    }

    public partial class BrowserHistoryModel
    {
        public static BrowserHistoryModel FromJson(string json) => JsonConvert.DeserializeObject<BrowserHistoryModel>(json, Personal_Insight.Models.JSON_Models.BrowserHistory.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this BrowserHistoryModel self) => JsonConvert.SerializeObject(self, Personal_Insight.Models.JSON_Models.BrowserHistory.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
