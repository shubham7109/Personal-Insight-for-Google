// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Personal_Insight.Models.JSON_Models.Extensions;
//
//    var extensionsModel = ExtensionsModel.FromJson(jsonString);

namespace Personal_Insight.Models.JSON_Models.Extensions
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class ExtensionsModel
    {
        [JsonProperty("Extensions")]
        public List<Extension> Extensions { get; set; }

        [JsonProperty("Extension Settings")]
        public List<ExtensionSetting> ExtensionSettings { get; set; }
    }

    public partial class ExtensionSetting
    {
        [JsonProperty("extension_id")]
        public string ExtensionId { get; set; }

        [JsonProperty("value")]
        public string Value { get; set; }

        [JsonProperty("key")]
        public string Key { get; set; }
    }

    public partial class Extension
    {
        [JsonProperty("incognito_enabled")]
        public bool IncognitoEnabled { get; set; }

        [JsonProperty("remote_install")]
        public bool RemoteInstall { get; set; }

        [JsonProperty("disable_reasons")]
        public long DisableReasons { get; set; }

        [JsonProperty("installed_by_custodian")]
        public bool InstalledByCustodian { get; set; }

        [JsonProperty("update_url")]
        public Uri UpdateUrl { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("id")]
        public string Id { get; set; }

        [JsonProperty("version")]
        public string Version { get; set; }

        [JsonProperty("enabled")]
        public bool Enabled { get; set; }
    }

    public partial class ExtensionsModel
    {
        public static ExtensionsModel FromJson(string json) => JsonConvert.DeserializeObject<ExtensionsModel>(json, Personal_Insight.Models.JSON_Models.Extensions.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this ExtensionsModel self) => JsonConvert.SerializeObject(self, Personal_Insight.Models.JSON_Models.Extensions.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
